<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <link
  href="https://cdn.jsdelivr.net/npm/remixicon@4.3.0/fonts/remixicon.css"
  rel="stylesheet"
/>

</head>
<body class="bg-gray-100 pt-16 sm:pt-20">
  
<!-- cart.ejs -->
 <%- include("../partials/nav") %>

<section class="max-w-7xl mx-auto px-6 py-16">
  <h2 class="text-2xl font-extrabold mb-8">YOUR CART</h2>

  <!-- Breadcrumb -->
  <nav class="flex text-sm text-gray-500 mb-6" aria-label="Breadcrumb">
    <ol class="inline-flex items-center space-x-1 md:space-x-2">
      <li class="inline-flex items-center">
        <a href="/" class="inline-flex items-center text-gray-500 hover:text-gray-700">
          <i class="fa fa-home mr-1"></i> Home
        </a>
      </li>
      <li><i class="fa fa-angle-right mx-2 text-gray-400"></i></li>
      <li class="inline-flex items-center">
        <a href="/product" class="inline-flex items-center text-gray-500 hover:text-gray-700">
          <i class="fa fa-shopping-bag mr-1"></i> Shop
        </a>
      </li>
   
<li><i class="fa fa-angle-right mx-2 text-gray-400"></i></li>
<li class="inline-flex items-center text-gray-800 font-semibold">
  <i class="fa fa-cart-shopping mr-1"></i> Cart
</li>


    </ol>
  </nav>

  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">

    <!-- Cart Items -->
    <div class="lg:col-span-2 space-y-4">

      <% if (cartItems.length > 0) { %>
        <% cartItems.forEach(item => { %>
          <div class="flex items-center justify-between border rounded-xl p-4 shadow-sm">

            <!-- Product Info -->
            <div class="flex items-center space-x-4">
              <img src="<%= item.variant.mainImage %>" 
     alt="<%= item.productId.name %>" 
     class="w-24 h-24 object-cover rounded-lg">

<div>
  <h3 class="font-semibold text-sm tracking-wide">
    <%= item.productId.name %>
  </h3>
  <p class="text-xs text-gray-500">
    Volume: <%= item.variant.volume %> ml
  </p>
  <p class="font-semibold mt-2">
    ₹<%= item.variant.discountPrice || item.variant.price %>
  </p>
</div>

            </div>

            <!-- Quantity + Delete -->
          <div class="flex items-center space-x-6">
  <!-- Grand Total (moved before quantity controls) -->
  <span class="text-gray-800 font-semibold w-20 text-center" id="total-<%= item._id %>">
    ₹<%= item.total.toFixed(2) %>
  </span>

  <!-- Quantity controls -->
  <div class="flex items-center border rounded-full px-3 py-1 bg-gray-100">
    <button onclick="updateCartQuantity('<%= item._id %>', -1)" class="text-gray-600 hover:text-black">−</button>
    <span class="mx-3" id="quantity-<%= item._id %>"><%= item.quantity %></span>
    <button onclick="updateCartQuantity('<%= item._id %>', 1)" class="text-gray-600 hover:text-black">+</button>
  </div>

  <!-- Delete button (stays fixed on the right) -->
  <button 
    onclick="removeFromCart('<%= item._id %>')" 
    class="text-red-500 hover:text-red-700 ml-auto"
  >
    <i class="ri-delete-bin-line text-lg"></i>
  </button>
</div>

          </div>
        <% }) %>
      <% } else { %>
        <p class="text-gray-500">Your cart is empty 🛒</p>
      <% } %>

    </div>

   <!-- Order Summary -->
<div class="border rounded-xl p-6 shadow-sm h-fit">
  <h3 class="font-semibold text-lg mb-4">Order Summary</h3>

  <!-- Subtotal -->
  <div class="flex justify-between text-sm mb-2">
    <span>Subtotal</span>
    <span class="font-semibold text-gray-800">₹<%= subtotal.toFixed(2) %></span>
  </div>

  <!-- Delivery Fee -->
  <div class="flex justify-between text-sm mb-2">
    <span>Delivery Fee</span>
    <% if (subtotal > 1000) { %>
      <span class="text-green-600 font-semibold">Free</span>
    <% } else { %>
      <span class="text-gray-800 font-semibold">₹50</span>
    <% } %>
  </div>

  <!-- Total -->
  <div class="border-t mt-4 pt-4 flex justify-between font-semibold text-base">
    <span>Total</span>
    <span class="font-bold text-black" id="grandTotal">
      ₹<%= (subtotal + (subtotal > 1000 ? 0 : 50)).toFixed(2) %>
    </span>
  </div>

  <!-- Checkout Button -->
  <a 
    href="/checkout/cart?<%= 
      'total=' + (subtotal + (subtotal > 1000 ? 0 : 50)).toFixed(2) + 
      '&productIds=' + cartItems.map(item => item.productId._id).join(',') + 
      '&variantIds=' + cartItems.map(item => item.variant._id).join(',')
    %>"
    class="mt-6 w-full bg-black text-white py-3 rounded-full flex items-center justify-center hover:bg-gray-800"
  >
    Proceed to Checkout
  </a>
</div>

  </div>
</section>

 <%- include("../partials/footer") %>


<script>

async function updateCartQuantity(itemId, change) {
  try {
    const res = await axios.patch(`/cart/update-quantity/${itemId}`, { change });
    const data = res.data;

    if (data.success) {
      // 🧮 Update quantity on page
      const quantityEl = document.querySelector(`#quantity-${itemId}`);
      const totalEl = document.querySelector(`#total-${itemId}`);
      const grandTotalEl = document.querySelector(`#grandTotal`);

      if (quantityEl) quantityEl.textContent = data.quantity;
      if (totalEl) totalEl.textContent = `₹${data.itemTotal.toFixed(2)}`;
      if (grandTotalEl) grandTotalEl.textContent = `₹${data.grandTotal.toFixed(2)}`;

    } else {
      Swal.fire({
        icon: "warning",
        title: data.message || "Quantity update failed",
        toast: true,
        position: "top-end",
        timer: 2000,
        showConfirmButton: false,
      });
    }
  } catch (err) {
    console.error("Update quantity error:", err);
    Swal.fire({
      icon: "error",
      title: "⚠️ Something went wrong!",
      toast: true,
      position: "top-end",
      timer: 2000,
      showConfirmButton: false,
    });
  }
}

async function removeFromCart(itemId) {
  try {
    const confirmResult = await Swal.fire({
      title: "Are you sure?",
      text: "Do you want to remove this item from your cart?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#3085d6",
      confirmButtonText: "Yes, remove it!",
      cancelButtonText: "Cancel"
    });

    if (!confirmResult.isConfirmed) return;

    const res = await axios.delete(`/cart/remove/${itemId}`);

    if (res.data.success) {
      Swal.fire({
        icon: "success",
        title: "Item removed from cart",
        toast: true,
        position: "top-end",
        timer: 2000,
        showConfirmButton: false,
        timerProgressBar: true
      });
      setTimeout(() => window.location.reload(), 1200);
    } else {
      Swal.fire({
        icon: "error",
        title: res.data.message || "Failed to remove item",
        toast: true,
        position: "top-end",
        timer: 2000,
        showConfirmButton: false,
        timerProgressBar: true
      });
    }
  } catch (err) {
    console.error("Remove item error:", err);
    Swal.fire({
      icon: "error",
      title: "Something went wrong!",
      toast: true,
      position: "top-end",
      timer: 2000,
      showConfirmButton: false,
      timerProgressBar: true
    });
  }
}



</script>




</body>
</html>

