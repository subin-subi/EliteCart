
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>User Management | Admin</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body class="bg-gray-100 font-sans text-gray-800">
  <div class="flex min-h-screen">
    <!-- Sidebar -->
    <%- include('../partials/sidebar', { path: '/admin/UserList' }) %>
    
    <!-- Main Content -->
    <main class="flex-1 ml-64 p-6">
      <!-- Header Section -->
      <div class="mb-6">
        <h1 class="text-3xl font-bold text-gray-800">User Management</h1>
        <p class="text-gray-600 mt-1">Manage user accounts and permissions</p>
      </div>

      <!-- Stats Cards -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
        <div class="bg-white p-6 rounded-lg shadow">
          <div class="flex items-center">
            <div class="p-2 bg-blue-100 rounded-lg">
              <span class="material-icons text-blue-600">people</span>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Total Users</p>
              <p class="text-2xl font-bold text-gray-900"><%= pagination ? pagination.totalUsers || 0 : 0 %></p>
            </div>
          </div>
        </div>
        
        <div class="bg-white p-6 rounded-lg shadow">
          <div class="flex items-center">
            <div class="p-2 bg-green-100 rounded-lg">
              <span class="material-icons text-green-600">check_circle</span>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Active Users</p>
              <p class="text-2xl font-bold text-gray-900"><%= userList ? userList.filter(u => !u.blocked).length : 0 %></p>
            </div>
          </div>
        </div>
        
        <div class="bg-white p-6 rounded-lg shadow">
          <div class="flex items-center">
            <div class="p-2 bg-red-100 rounded-lg">
              <span class="material-icons text-red-600">block</span>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Blocked Users</p>
              <p class="text-2xl font-bold text-gray-900"><%= userList ? userList.filter(u => u.blocked).length : 0 %></p>
            </div>
          </div>
        </div>
        
        <div class="bg-white p-6 rounded-lg shadow">
          <div class="flex items-center">
            <div class="p-2 bg-yellow-100 rounded-lg">
              <span class="material-icons text-yellow-600">search</span>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Search Results</p>
              <p class="text-2xl font-bold text-gray-900"><%= userList ? userList.length : 0 %></p>
            </div>
          </div>
        </div>
      </div>

      <!-- Main Content -->
      <div class="bg-white rounded-lg shadow overflow-hidden">
        <!-- Header with Search -->
        <div class="px-6 py-4 border-b border-gray-200">
          <div class="flex justify-between items-center">
            <h2 class="text-lg font-semibold text-gray-800">User List</h2>
            <div class="flex items-center space-x-2">
              <input type="checkbox" id="selectAllUsers" class="rounded border-gray-300" />
              <label for="selectAllUsers" class="text-sm text-gray-600">Select All</label>
            </div>
          </div>
        </div>

        <!-- Search Section -->
        <div class="px-6 py-4 bg-gray-50 border-b border-gray-200">
          <div class="flex items-center space-x-3">
            <div class="relative flex-1 max-w-md">
              <input 
                type="text" 
                id="searchUser" 
                placeholder="Search by name..." 
                value="<%= search || '' %>"
                class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
              <span class="material-icons absolute left-3 top-2.5 text-gray-400">search</span>
            </div>
            <button 
              onclick="performSearch()" 
              class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"
            >
              Search
            </button>
            <% if (search) { %>
              <button 
                onclick="clearSearch()" 
                class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition"
              >
                Clear
              </button>
            <% } %>
          </div>
        </div>
        
        <!-- Table -->
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  <input type="checkbox" id="selectAllUsersHeader" class="rounded border-gray-300" />
                </th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Contact</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              <% if (userList && userList.length > 0) { %>
                <% userList.forEach(user => { %>
                  <tr class="hover:bg-gray-50 transition">
                    <td class="px-6 py-4 whitespace-nowrap">
                      <input type="checkbox" class="user-checkbox rounded border-gray-300" value="<%= user._id %>" />
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="flex items-center">
                        <div class="flex-shrink-0 h-10 w-10">
                          <div class="h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center">
                            <span class="text-sm font-medium text-gray-700">
                              <%= user.name ? user.name.charAt(0).toUpperCase() : 'U' %>
                            </span>
                          </div>
                        </div>
                        <div class="ml-4">
                          <div class="text-sm font-medium text-gray-900"><%= user.name || 'N/A' %></div>
                          <div class="text-sm text-gray-500">ID: <%= user._id.toString().slice(-8) %></div>
                        </div>
                      </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="text-sm text-gray-900"><%= user.email %></div>
                      <div class="text-sm text-gray-500"><%= user.mobileNo || 'No phone' %></div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full <%= user.blocked ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800' %>">
                        <%= user.blocked ? 'Blocked' : 'Active' %>
                      </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="flex items-center space-x-3">
                        <label class="inline-flex items-center cursor-pointer">
                          <input type="checkbox" class="sr-only toggle-user-status" data-id="<%= user._id %>" <%= user.blocked ? '' : 'checked' %> />
                          <div class="relative">
                            <div class="w-10 h-6 bg-gray-200 rounded-full shadow-inner transition-colors duration-300 <%= user.blocked ? 'bg-red-500' : 'bg-green-500' %>"></div>
                            <div class="dot absolute left-1 top-1 w-4 h-4 bg-white rounded-full transition-transform duration-300 <%= user.blocked ? '' : 'translate-x-4' %>"></div>
                          </div>
                        </label>
                        <span class="text-sm font-medium <%= user.blocked ? 'text-red-600' : 'text-green-600' %>">
                          <%= user.blocked ? 'Blocked' : 'Active' %>
                        </span>
                      </div>
                    </td>
                  </tr>
                <% }) %>
              <% } else { %>
                <tr>
                  <td colspan="5" class="px-6 py-12 text-center">
                    <div class="flex flex-col items-center">
                      <span class="material-icons text-gray-400 text-4xl mb-2">people_outline</span>
                      <p class="text-gray-500 text-lg">No users found</p>
                      <% if (search) { %>
                        <p class="text-gray-400 text-sm mt-1">Try adjusting your search terms</p>
                      <% } %>
                    </div>
                  </td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>

        <!-- Pagination -->
        <% if (pagination && pagination.totalPages > 1) { %>
          <div class="px-6 py-4 border-t border-gray-200">
            <div class="flex justify-between items-center">
              <div class="flex items-center space-x-2">
                <% if (pagination.hasPrevPage) { %>
                  <a href="/admin/userlist?page=<%= pagination.prevPage %><%= search ? '&search=' + search : '' %>" 
                     class="px-4 py-2 text-sm bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition">
                    Previous
                  </a>
                <% } %>
              </div>
              
              <div class="flex items-center space-x-2">
                <span class="text-sm text-gray-600">
                  Page <%= pagination.currentPage %> of <%= pagination.totalPages %>
                </span>
              </div>
              
              <div class="flex items-center space-x-2">
                <% if (pagination.hasNextPage) { %>
                  <a href="/admin/userlist?page=<%= pagination.nextPage %><%= search ? '&search=' + search : '' %>" 
                     class="px-4 py-2 text-sm bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition">
                    Next
                  </a>
                <% } %>
              </div>
            </div>
          </div>
        <% } %>
      </div>
    </main>
  </div>

  <script>
    let searchTimeout;

    // Debounced search function
    function debouncedSearch() {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        performSearch();
      }, 500);
    }

    function performSearch() {
      const searchTerm = document.getElementById('searchUser').value.trim();
      const currentUrl = new URL(window.location);
      
      if (searchTerm) {
        currentUrl.searchParams.set('search', searchTerm);
      } else {
        currentUrl.searchParams.delete('search');
      }
      
      currentUrl.searchParams.delete('page'); // Reset to first page
      window.location.href = currentUrl.toString();
    }

    function clearSearch() {
      document.getElementById('searchUser').value = '';
      const currentUrl = new URL(window.location);
      currentUrl.searchParams.delete('search');
      currentUrl.searchParams.delete('page');
      window.location.href = currentUrl.toString();
    }

    // Setup search input listener
    document.addEventListener('DOMContentLoaded', function () {
      console.log('DOM loaded, setting up user management...');
      
      // Setup search input listener
      const searchInput = document.getElementById('searchUser');
      if (searchInput) {
        searchInput.addEventListener('input', debouncedSearch);
        searchInput.addEventListener('keypress', function(e) {
          if (e.key === 'Enter') {
            performSearch();
          }
        });
      }
      
      // Setup toggle listeners
      const toggles = document.querySelectorAll('.toggle-user-status');
      console.log('Found', toggles.length, 'toggle buttons');

      toggles.forEach((toggle, index) => {
        console.log(`Setting up toggle ${index + 1} for user ID:`, toggle.getAttribute('data-id'));
        
        toggle.addEventListener('change', async function () {
          const userId = this.getAttribute('data-id');
          const isBlocked = !this.checked;
          
          console.log('Toggle clicked for user ID:', userId, 'New blocked state:', isBlocked);

          try {
            const response = await fetch('/admin/toggle-block', {
              method: 'POST',
              headers: { 
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
              },
              body: JSON.stringify({ userId })
            });

            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
              const textResponse = await response.text();
              console.error('Response text:', textResponse);
              throw new Error('Server returned non-JSON response');
            }

            const result = await response.json();
            console.log('Response JSON:', result);

            if (response.ok && result.success) {
              Swal.fire({
                title: 'Success!',
                text: result.message,
                icon: 'success',
                timer: 1500,
                showConfirmButton: false
              });
              
              // Update the toggle appearance
              const toggleContainer = this.parentElement.querySelector('.w-10');
              const dot = this.parentElement.querySelector('.dot');
              const statusText = this.parentElement.nextElementSibling;
              
              if (result.blocked) {
                toggleContainer.classList.remove('bg-green-500');
                toggleContainer.classList.add('bg-red-500');
                dot.classList.remove('translate-x-4');
                statusText.textContent = 'Blocked';
                statusText.className = 'text-sm font-medium text-red-600';
              } else {
                toggleContainer.classList.remove('bg-red-500');
                toggleContainer.classList.add('bg-green-500');
                dot.classList.add('translate-x-4');
                statusText.textContent = 'Active';
                statusText.className = 'text-sm font-medium text-green-600';
              }
              
              // Update the status badge
              const statusBadge = this.closest('tr').querySelector('td:nth-child(4) span');
              if (result.blocked) {
                statusBadge.textContent = 'Blocked';
                statusBadge.className = 'inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800';
              } else {
                statusBadge.textContent = 'Active';
                statusBadge.className = 'inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800';
              }
              
              // Update stats
              updateStats();
            } else {
              console.error('Toggle failed:', result);
              Swal.fire({
                title: 'Error!',
                text: result.error || 'Could not update user status.',
                icon: 'error',
                timer: 2000,
                showConfirmButton: false
              });
              this.checked = !isBlocked;
            }
          } catch (error) {
            console.error('Toggle error:', error);
            Swal.fire({
              title: 'Error!',
              text: 'Network error occurred: ' + error.message,
              icon: 'error',
              timer: 2000,
              showConfirmButton: false
            });
            this.checked = !isBlocked;
          }
        });
      });

      // Setup select all functionality
      const selectAllHeader = document.getElementById('selectAllUsersHeader');
      const selectAllMain = document.getElementById('selectAllUsers');
      
      function setupSelectAll(selectAllElement) {
        if (selectAllElement) {
          selectAllElement.addEventListener('change', function () {
            const checkboxes = document.querySelectorAll('.user-checkbox');
            checkboxes.forEach(cb => { 
              cb.checked = selectAllElement.checked; 
            });
            
            // Sync both select all checkboxes
            if (selectAllHeader) selectAllHeader.checked = selectAllElement.checked;
            if (selectAllMain) selectAllMain.checked = selectAllElement.checked;
          });
        }
      }
      
      setupSelectAll(selectAllHeader);
      setupSelectAll(selectAllMain);
      
      // Update stats function
      function updateStats() {
        const activeUsers = document.querySelectorAll('.toggle-user-status:checked').length;
        const blockedUsers = document.querySelectorAll('.toggle-user-status:not(:checked)').length;
        const totalUsers = activeUsers + blockedUsers;
        
        // Update stats cards (you can implement this if needed)
        console.log('Stats updated - Active:', activeUsers, 'Blocked:', blockedUsers, 'Total:', totalUsers);
      }
    });
  </script>
</body>
</html>